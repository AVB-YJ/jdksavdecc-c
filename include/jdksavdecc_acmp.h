#pragma once
#ifndef JDKSAVDECC_ACMP_H
#define JDKSAVDECC_ACMP_H

/*
  Copyright (c) 2013, J.D. Koftinoff Software, Ltd.
  All rights reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

   1. Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

   3. Neither the name of J.D. Koftinoff Software, Ltd. nor the names of its
      contributors may be used to endorse or promote products derived from
      this software without specific prior written permission.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
*/

#include "jdksavdecc_world.h"
#include "jdksavdecc_pdu.h"


/** \addtogroup acmpdu ACMPDU - Clause 8.2.1 */
/*@{*/

struct jdksavdecc_acmpdu_common_control_header
{
    uint32_t cd:1;
    uint32_t subtype:JDKSAVDECC_SUBTYPE_DATA_SUBTYPE_WIDTH;
    uint32_t sv:1;
    uint32_t version:JDKSAVDECC_SUBTYPE_DATA_VERSION_WIDTH;
    uint32_t message_type:JDKSAVDECC_SUBTYPE_DATA_CONTROL_DATA_WIDTH;
    uint32_t status:JDKSAVDECC_SUBTYPE_DATA_STATUS_WIDTH;
    uint32_t control_data_length:JDKSAVDECC_SUBTYPE_DATA_CONTROL_DATA_LENGTH_WIDTH;
    struct jdksavdecc_eui64 stream_id;
};

static inline ssize_t jdksavdecc_acmpdu_common_control_header_read( struct jdksavdecc_acmpdu_common_control_header *p, void const *base, ssize_t pos, size_t len )
{
    return jdksavdecc_common_control_header_read( (struct jdksavdecc_common_control_header *)p, base, pos, len );
}

static inline ssize_t jdksavdecc_acmpdu_common_control_header_write( struct jdksavdecc_acmpdu_common_control_header const *p, void *base, ssize_t pos, size_t len )
{
    return jdksavdecc_common_control_header_write( (struct jdksavdecc_common_control_header const *)p, base, pos, len );
}

/*@}*/

/** \addtogroup acmp_flag acmp_flag : flags field - Clause 8.2.1.17  */
/*@{*/

#define JDKSAVDECC_ACMP_FLAG_CLASS_B_BIT (15)
#define JDKSAVDECC_ACMP_FLAG_CLASS_B (0x0001)
#define JDKSAVDECC_ACMP_FLAG_CLASS_B_MASK (~0x0001)
#define JDKSAVDECC_ACMP_FLAG_FAST_CONNECT_BIT (14)
#define JDKSAVDECC_ACMP_FLAG_FAST_CONNECT (0x0002)
#define JDKSAVDECC_ACMP_FLAG_FAST_CONNECT_MASK (~0x0002)
#define JDKSAVDECC_ACMP_FLAG_SAVED_STATE_BIT (13)
#define JDKSAVDECC_ACMP_FLAG_SAVED_STATE (0x0004)
#define JDKSAVDECC_ACMP_FLAG_SAVED_STATE_MASK (~0x0004)
#define JDKSAVDECC_ACMP_FLAG_STREAMING_WAIT_BIT (12)
#define JDKSAVDECC_ACMP_FLAG_STREAMING_WAIT (0x0008)
#define JDKSAVDECC_ACMP_FLAG_STREAMING_WAIT_MASK (~0x0008)
#define JDKSAVDECC_ACMP_FLAG_SUPPORTS_ENCRYPTED_BIT (12)
#define JDKSAVDECC_ACMP_FLAG_SUPPORTS_ENCRYPTED (0x0008)
#define JDKSAVDECC_ACMP_FLAG_SUPPORTS_ENCRYPTED_MASK (~0x0008)
#define JDKSAVDECC_ACMP_FLAG_ENCRYPTED_PDU_BIT (11)
#define JDKSAVDECC_ACMP_FLAG_ENCRYPTED_PDU (0x0010)
#define JDKSAVDECC_ACMP_FLAG_ENCRYPTED_PDU_MASK (~0x0010)

/*@}*/


/** \addtogroup acmpdu ACMPDU - Clause 8.2.1 */
/*@{*/


#define JDKSAVDECC_ACMPDU_OFFSET_CONTROLLER_GUID (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+0)
#define JDKSAVDECC_ACMPDU_OFFSET_TALKER_GUID (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+8)
#define JDKSAVDECC_ACMPDU_OFFSET_LISTENER_GUID (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+16)
#define JDKSAVDECC_ACMPDU_OFFSET_TALKER_UNIQUE_ID (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+24)
#define JDKSAVDECC_ACMPDU_OFFSET_LISTENER_UNIQUE_ID (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+26)
#define JDKSAVDECC_ACMPDU_OFFSET_STREAM_DEST_MAC (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+28)
#define JDKSAVDECC_ACMPDU_OFFSET_CONNECTION_COUNT (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+34)
#define JDKSAVDECC_ACMPDU_OFFSET_SEQUENCE_ID (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+36)
#define JDKSAVDECC_ACMPDU_OFFSET_ACMP_FLAGS (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+38)
#define JDKSAVDECC_ACMPDU_OFFSET_RESERVED (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+40)
#define JDKSAVDECC_ACMPDU_LEN (JDKSAVDECC_COMMON_CONTROL_HEADER_LEN+44)

/*@}*/

/** \addtogroup acmp_message_type acmp_message_type : message_type field - Clause 8.2.1.5  */
/*@{*/

#define JDKSAVDECC_ACMP_MESSAGE_TYPE_CONNECT_TX_COMMAND (0)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_CONNECT_TX_RESPONSE (1)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_DISCONNECT_TX_COMMAND (2)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_DISCONNECT_TX_RESPONSE (3)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_GET_TX_STATE_COMMAND (4)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_GET_TX_STATE_RESPONSE (5)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_CONNECT_RX_COMMAND (6)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_CONNECT_RX_RESPONSE (7)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_DISCONNECT_RX_COMMAND (8)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_DISCONNECT_RX_RESPONSE (9)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_GET_RX_STATE_COMMAND (10)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_GET_RX_STATE_RESPONSE (11)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_GET_TX_CONNECTION_COMMAND (12)
#define JDKSAVDECC_ACMP_MESSAGE_TYPE_GET_TX_CONNECTION_RESPONSE (13)

/*@}*/

/** \addtogroup acmp_status acmp_status : status field - Clause 8.2.1.6  */
/*@{*/

#define JDKSAVDECC_ACMP_STATUS_SUCCESS (0)
#define JDKSAVDECC_ACMP_STATUS_LISTENER_UNKNOWN_ID (1)
#define JDKSAVDECC_ACMP_STATUS_TALKER_UNKNOWN_ID (2)
#define JDKSAVDECC_ACMP_STATUS_TALKER_DEST_MAC_FAIL (3)
#define JDKSAVDECC_ACMP_STATUS_TALKER_NO_STREAM_INDEX (4)
#define JDKSAVDECC_ACMP_STATUS_TALKER_NO_BANDWIDTH (5)
#define JDKSAVDECC_ACMP_STATUS_TALKER_EXCLUSIVE (6)
#define JDKSAVDECC_ACMP_STATUS_LISTENER_TALKER_TIMEOUT (7)
#define JDKSAVDECC_ACMP_STATUS_LISTENER_EXCLUSIVE (8)
#define JDKSAVDECC_ACMP_STATUS_STATE_UNAVAILABLE (9)
#define JDKSAVDECC_ACMP_STATUS_NOT_CONNECTED (10)
#define JDKSAVDECC_ACMP_STATUS_NO_SUCH_CONNECTION (11)
#define JDKSAVDECC_ACMP_STATUS_COULD_NOT_SEND_MESSAGE (12)
#define JDKSAVDECC_ACMP_STATUS_TALKER_MISBEHAVING (13)
#define JDKSAVDECC_ACMP_STATUS_LISTENER_MISBEHAVING (14)
#define JDKSAVDECC_ACMP_STATUS_RESERVED (15)
#define JDKSAVDECC_ACMP_STATUS_CONTROLLER_NOT_AUTHORIZED (16)
#define JDKSAVDECC_ACMP_STATUS_INCOMPATIBLE_REQUEST (17)
#define JDKSAVDECC_ACMP_STATUS_NOT_SUPPORTED (31)

/*@}*/

#endif

